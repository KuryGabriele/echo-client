name: Build and Release Electron App For Windows

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-release-windows:
    runs-on: windows-latest

    if: contains(github.event.head_commit.message, 'Create new release')

    env:
      CI: false
      GITHUB_TOKEN: ${{ secrets.zth_token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies for the React frontend
        shell: pwsh
        run: npm install
        working-directory: ./echo

      - name: Install dependencies for the Electron app
        shell: pwsh
        run: npm install
        working-directory: ./electron

      - name: Build Electron App
        id: build_electron_app
        shell: pwsh
        working-directory: ./electron
        run: |
          $build_output = npm run dist
          $out_path = ./dist
          echo "artifact_path=$out_path" >> $ENV:GITHUB_OUTPUT
          echo "Build Output: $out_path"

      - name: Extract echo version from package.json
        id: extract_echo_version
        shell: pwsh
        run: |
          $pkg_version = (Get-Content -Path .\echo\package.json | ConvertFrom-Json).version
          echo "Version: $pkg_version"
          echo "Working Directory: ${{ steps.build_electron_app.outputs.artifact_path }}"
          echo "release_echo_version=$pkg_version" >> $ENV:GITHUB_OUTPUT
      
      - name: Extract electron version from package.json
        id: extract_electorn_version
        shell: pwsh
        run: |
          $pkg_version = (Get-Content -Path .\electron\package.json | ConvertFrom-Json).version
          echo "Version: $pkg_version"
          echo "release_electron_version=$pkg_version" >> $ENV:GITHUB_OUTPUT

      - name: Check if version is a pre-release
        id: check_pre_release
        shell: pwsh
        run: |
          $version = "${{ steps.extract_echo_version.outputs.release_echo_version }}"
          echo "Version: $version"
          $first_digit = $version.Split('.')[0]
          if ($first_digit -ne '0') {
            echo "is_prerelease=false" >> $ENV:GITHUB_OUTPUT
          } else {
            echo "is_prerelease=true" >> $ENV:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_echo_version.outputs.release_echo_version }}
          release_name: Release v${{ steps.extract_echo_version.outputs.release_echo_version }}
          draft: false
          prerelease: ${{ steps.check_pre_release.outputs.is_prerelease }}

      - name: Upload Executables
        id: upload-executables
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./"
          asset_name: Echo-Setup-${{ steps.extract_echo_version.outputs.release_echo_version }}.exe
          asset_content_type: application/zip
      
      - name: Upload blockmap
        id: upload-blockmap
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./"
          asset_name: Echo-Setup-${{ steps.extract_echo_version.outputs.release_echo_version }}.exe.blockmap
          asset_content_type: application/zip

      - name: Upload builder debug
        id: upload-builder-debug
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./"
          asset_name: builder-debug.yml
          asset_content_type: application/zip

      - name: Upload builder-effective-config
        id: upload-builder-effective-config
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./"
          asset_name: builder-effective-config.yml
          asset_content_type: application/zip

      - name: Upload latest.yml
        id: upload-latest-yml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./"
          asset_name: latest.yml
          asset_content_type: application/zip