name: Build and Release Electron App For Windows

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: windows-latest

    env:
      CI: false
      GITHUB_TOKEN: ${{ secrets.zth_token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies for the React frontend
        shell: pwsh
        run: npm install
        working-directory: ./echo

      - name: Build React Frontend
        working-directory: ./echo

      - name: Install dependencies for the Electron app
        working-directory: ./electron

      - name: Build Electron App
        id: build_electron_app
        shell: pwsh
        working-directory: ./electron
        run: |
          build_output=$(npm run make)
          path_reg=$(echo "$build_output" | grep -oP '\[DATA\] Artifacts available at: \K.*')
          echo $path_reg
          ls $path_reg -la
          echo "artifact_path=$path_reg" >> $GITHUB_OUTPUT

      - name: Extract version from package.json
        id: extract_version
        shell: pwsh
        run: |
          $pkg_version = (Get-Content -Path .\echo\package.json | ConvertFrom-Json).version
          echo "Version: $pkg_version"
          echo "Working Directory: ${{ steps.build_electron_app.outputs.artifact_path }}"
          echo "release_version=$pkg_version" >> $ENV:GITHUB_OUTPUT

      - name: Check if version is a pre-release
        id: check_pre_release
        shell: pwsh
        run: |
          pkg_version=$(cat ./echo/package.json | jq -r .version)
          echo $pkg_version
          echo "version=$pkg_version" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.release_version }}
          release_name: Release v${{ steps.extract_version.outputs.release_version }}
          draft: false
          prerelease: ${{ steps.check_pre_release.outputs.is_prerelease }}

      - name: Upload Executables
        id: upload-executables
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            ${{ steps.build_electron_app.outputs.artifact_path }}/*.exe
          asset_name: echo-${{ steps.extract_version.outputs.version }}-executables.zip
          asset_content_type: application/zip

      - name: Upload Package
        id: upload-package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            ${{ steps.build_electron_app.outputs.artifact_path }}/*.nupkg
          asset_name: echo-${{ steps.extract_version.outputs.version }}.nupkg
          asset_content_type: application/zip
        
      - name: Create ZIP Archive of Pre-compiled Folder
        shell: pwsh
        working-directory: ./electron/out
        run: 7z a -r -tzip pre-compiled-${{ steps.extract_version.outputs.release_version }}.zip Echo-win32-x64
        
      - name: Upload Source Code
        id: upload-source-code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./electron/out/Echo-win32-x64
          asset_name: pre-compiled-${{ steps.extract_version.outputs.version }}.zip
          asset_content_type: application/zip
