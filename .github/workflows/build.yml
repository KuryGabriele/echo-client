name: Build and Release Electron App For Windows

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: windows-latest

    env:
      CI: false
      GITHUB_TOKEN: ${{ secrets.zth_token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies for the React frontend
        shell: pwsh
        run: npm install
        working-directory: ./echo

      - name: Build React Frontend
        shell: pwsh
        run: npm run build
        working-directory: ./echo

      - name: Install dependencies for the Electron app
        shell: pwsh
        run: npm install
        working-directory: ./electron

      - name: Build Electron App
        id: build_electron_app
        shell: pwsh
        working-directory: ./electron
        run: |
          $build_output = npm run make
          $out_path = echo $build_output | Select-String -Pattern '\[DATA\] Artifacts available at: ' | ForEach-Object { $_ -replace '^.*\[DATA\] Artifacts available at: ', '' }
          echo "artifact_path=$out_path" >> $ENV:GITHUB_OUTPUT
          echo "Build Output: $out_path"

      - name: Extract version from package.json
        id: extract_version
        shell: pwsh
        run: |
          $pkg_version = (Get-Content -Path .\echo\package.json | ConvertFrom-Json).version
          echo "Version: $pkg_version"
          echo "Working Directory: ${{ steps.build_electron_app.outputs.artifact_path }}"
          echo "release_version=$pkg_version" >> $ENV:GITHUB_OUTPUT

      - name: Check if version is a pre-release
        id: check_pre_release
        shell: pwsh
        run: |
          $version = "${{ steps.extract_version.outputs.release_version }}"
          echo "Version: $version"
          $first_digit = $version.Split('.')[0]
          if ($first_digit -ne '0') {
            echo "is_prerelease=false" >> $ENV:GITHUB_OUTPUT
          } else {
            echo "is_prerelease=true" >> $ENV:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.release_version }}
          release_name: Release v${{ steps.extract_version.outputs.release_version }}
          draft: false
          prerelease: ${{ steps.check_pre_release.outputs.is_prerelease }}

      - name: Upload Executables
        id: upload-executables
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ steps.build_electron_app.outputs.artifact_path }}/squirrel.windows/x64/Echo-0.1.0 Setup.exe"
          asset_name: echo-installer-${{ steps.extract_version.outputs.release_version }}.exe
          asset_content_type: application/zip

      - name: Upload Package
        id: upload-package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ steps.build_electron_app.outputs.artifact_path }}/squirrel.windows/x64/echo-0.1.0-full.nupkg"
          asset_name: echo-${{ steps.extract_version.outputs.release_version }}.nupkg
          asset_content_type: application/zip
        
      - name: Create ZIP Archive of Pre-compiled Folder
        shell: pwsh
        working-directory: ./electron/out
        run: 7z a -r -tzip pre-compiled-${{ steps.extract_version.outputs.release_version }}.zip Echo-win32-x64
        
      - name: Upload Source Code
        id: upload-source-code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.zth_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./electron/out/pre-compiled-${{ steps.extract_version.outputs.release_version }}.zip
          asset_name: pre-compiled-${{ steps.extract_version.outputs.release_version }}.zip
          asset_content_type: application/zip